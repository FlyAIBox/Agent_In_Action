<svg viewBox="0 0 1400 1000" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title { font-family: 'SimSun', serif; font-size: 26px; font-weight: bold; fill: #1a1a1a; }
      .subtitle { font-family: 'SimSun', serif; font-size: 14px; fill: #333; }
      .label-cn { font-family: 'SimSun', serif; font-size: 12px; fill: #2c3e50; }
      .label-en { font-family: 'Times New Roman', serif; font-size: 10px; fill: #555; font-style: italic; }
      .formula { font-family: 'Times New Roman', serif; font-size: 11px; fill: #c0392b; font-style: italic; }
      .docker-blue { fill: #0db7ed; stroke: #0a8ec2; stroke-width: 2; }
      .compose-green { fill: #2ecc71; stroke: #27ae60; stroke-width: 2; }
      .volume-orange { fill: #f39c12; stroke: #d68910; stroke-width: 2; }
      .network-purple { fill: #9b59b6; stroke: #8e44ad; stroke-width: 2; }
      .code-bg { fill: #f8f9fa; stroke: #dee2e6; stroke-width: 1; }
      .arrow { stroke: #34495e; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .arrow-network { stroke: #9b59b6; stroke-width: 2; fill: none; marker-end: url(#arrowhead-purple); stroke-dasharray: 5,3; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#34495e" />
    </marker>
    <marker id="arrowhead-purple" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#9b59b6" />
    </marker>
    <filter id="shadow">
      <feDropShadow dx="2" dy="2" stdDeviation="2" flood-opacity="0.3"/>
    </filter>
  </defs>

  <!-- Title -->
  <text x="700" y="35" text-anchor="middle" class="title">Docker容器化部署架构</text>
  <text x="700" y="57" text-anchor="middle" class="subtitle">Docker Containerized Deployment Architecture</text>

  <!-- Docker Compose Orchestration -->
  <rect x="30" y="80" width="1340" height="200" class="compose-green" rx="10" filter="url(#shadow)"/>
  <text x="700" y="110" text-anchor="middle" class="label-cn" fill="white" font-weight="bold" font-size="16">Docker Compose 服务编排层</text>
  <text x="700" y="130" text-anchor="middle" class="label-en" fill="white">Container Orchestration with Docker Compose v2</text>
  
  <text x="50" y="160" class="label-cn" fill="white" font-weight="bold">核心功能:</text>
  <text x="70" y="180" class="label-cn" fill="white" font-size="11">• 多容器定义与依赖管理 (services dependency)</text>
  <text x="70" y="198" class="label-cn" fill="white" font-size="11">• 统一网络配置 (bridge network)</text>
  <text x="70" y="216" class="label-cn" fill="white" font-size="11">• 卷挂载管理 (volume mounting)</text>
  <text x="70" y="234" class="label-cn" fill="white" font-size="11">• 健康检查与自动重启 (healthcheck And restart policy)</text>
  
  <text x="750" y="160" class="label-cn" fill="white" font-weight="bold">部署命令:</text>
  <text x="770" y="180" class="formula" fill="white" font-size="11">$ docker compose up --build -d</text>
  <text x="770" y="198" class="formula" fill="white" font-size="11">$ docker compose logs -f [service]</text>
  <text x="770" y="216" class="formula" fill="white" font-size="11">$ docker compose restart [service]</text>
  <text x="770" y="234" class="formula" fill="white" font-size="11">$ docker compose down</text>

  <text x="1100" y="160" class="label-cn" fill="white" font-weight="bold">配置文件:</text>
  <text x="1120" y="180" class="formula" fill="white" font-size="11">docker-compose.yml</text>
  <text x="1120" y="198" class="formula" fill="white" font-size="11">version: "3.8"</text>
  <text x="1120" y="216" class="label-cn" fill="white" font-size="10">服务数量: 2</text>

  <!-- Frontend Container -->
  <rect x="80" y="320" width="380" height="340" class="docker-blue" rx="8" filter="url(#shadow)"/>
  <text x="270" y="350" text-anchor="middle" class="label-cn" fill="white" font-weight="bold" font-size="15">🐳 Frontend 容器</text>
  <text x="270" y="370" text-anchor="middle" class="label-en" fill="white">Streamlit Web UI Container</text>
  
  <rect x="100" y="385" width="340" height="260" class="code-bg" rx="6"/>
  <text x="120" y="407" class="label-cn" font-weight="bold">Dockerfile 配置:</text>
  <text x="130" y="428" class="formula" font-size="10">FROM python:3.10-slim</text>
  <text x="130" y="445" class="formula" font-size="10">WORKDIR /app</text>
  <text x="130" y="462" class="formula" font-size="10">COPY requirements.txt .</text>
  <text x="130" y="479" class="formula" font-size="10">RUN pip install --no-cache-dir -r requirements.txt</text>
  <text x="130" y="496" class="formula" font-size="10">COPY . .</text>
  <text x="130" y="513" class="formula" font-size="10">EXPOSE 8501</text>
  <text x="130" y="530" class="formula" font-size="10">HEALTHCHECK --interval=30s CMD curl -f http://localhost:8501/_stcore/health</text>
  <text x="130" y="547" class="formula" font-size="10">CMD ["streamlit", "run", "streamlit_app.py", "--server.address=0.0.0.0"]</text>
  
  <text x="120" y="575" class="label-cn" font-weight="bold">资源配置:</text>
  <text x="130" y="595" class="label-cn" font-size="11">• 内存限制: 512MB</text>
  <text x="130" y="611" class="label-cn" font-size="11">• CPU限制: 0.5 core</text>
  <text x="130" y="627" class="label-cn" font-size="11">• 端口映射: 8501:8501</text>

  <!-- Backend Container -->
  <rect x="520" y="320" width="380" height="340" class="docker-blue" rx="8" filter="url(#shadow)"/>
  <text x="710" y="350" text-anchor="middle" class="label-cn" fill="white" font-weight="bold" font-size="15">🐳 Backend 容器</text>
  <text x="710" y="370" text-anchor="middle" class="label-en" fill="white">FastAPI Service Container</text>
  
  <rect x="540" y="385" width="340" height="260" class="code-bg" rx="6"/>
  <text x="560" y="407" class="label-cn" font-weight="bold">Dockerfile 配置:</text>
  <text x="570" y="428" class="formula" font-size="10">FROM python:3.10-slim</text>
  <text x="570" y="445" class="formula" font-size="10">WORKDIR /app</text>
  <text x="570" y="462" class="formula" font-size="10">COPY requirements.txt .</text>
  <text x="570" y="479" class="formula" font-size="10">RUN pip install --no-cache-dir -r requirements.txt</text>
  <text x="570" y="496" class="formula" font-size="10">COPY . .</text>
  <text x="570" y="513" class="formula" font-size="10">RUN mkdir -p results</text>
  <text x="570" y="530" class="formula" font-size="10">EXPOSE 8080</text>
  <text x="570" y="547" class="formula" font-size="10">HEALTHCHECK --interval=30s CMD curl -f http://localhost:8080/health</text>
  <text x="570" y="564" class="formula" font-size="10">CMD ["python", "api_server.py"]</text>
  
  <text x="560" y="590" class="label-cn" font-weight="bold">资源配置:</text>
  <text x="570" y="610" class="label-cn" font-size="11">• 内存限制: 1GB</text>
  <text x="570" y="626" class="label-cn" font-size="11">• CPU限制: 1.0 core</text>

  <!-- External Services Container (Conceptual) -->
  <rect x="960" y="320" width="380" height="340" fill="#e17055" stroke="#d63031" stroke-width="2" rx="8" filter="url(#shadow)"/>
  <text x="1150" y="350" text-anchor="middle" class="label-cn" fill="white" font-weight="bold" font-size="15">🌐 外部服务</text>
  <text x="1150" y="370" text-anchor="middle" class="label-en" fill="white">External Services (API)</text>
  
  <rect x="980" y="385" width="340" height="260" fill="#f8f9fa" stroke="#dee2e6" stroke-width="1" rx="6"/>
  
  <circle cx="1040" cy="430" r="20" fill="#5f27cd" stroke="#341f97" stroke-width="2"/>
  <text x="1070" y="435" class="label-cn" font-weight="bold">DuckDuckGo搜索</text>
  <text x="1070" y="450" class="label-en" font-size="9">No API Key Required</text>
  
  <circle cx="1040" cy="495" r="20" fill="#00b894" stroke="#00a383" stroke-width="2"/>
  <text x="1070" y="500" class="label-cn" font-weight="bold">MCP天气服务器</text>
  <text x="1070" y="515" class="label-en" font-size="9">QWeather API via MCP</text>
  
  <circle cx="1040" cy="560" r="20" fill="#0984e3" stroke="#0652dd" stroke-width="2"/>
  <text x="1070" y="565" class="label-cn" font-weight="bold">OpenAI API</text>
  <text x="1070" y="580" class="label-en" font-size="9">LLM Inference Service</text>
  
  <text x="990" y="610" class="label-cn" font-weight="bold">环境变量配置:</text>
  <text x="1000" y="628" class="formula" font-size="10">OPENAI_API_KEY=sk-xxx... (必需)</text>
  <text x="1000" y="643" class="formula" font-size="10">QWEATHER_API_KEY=abc... (可选)</text>

  <!-- Volumes -->
  <rect x="80" y="700" width="420" height="140" class="volume-orange" rx="8" filter="url(#shadow)"/>
  <text x="290" y="730" text-anchor="middle" class="label-cn" fill="white" font-weight="bold" font-size="14">📦 数据卷 (Volumes)</text>
  
  <text x="100" y="760" class="label-cn" fill="white" font-weight="bold">卷挂载配置:</text>
  <text x="110" y="780" class="formula" fill="white" font-size="10">./results:/app/results</text>
  <text x="110" y="797" class="formula" fill="white" font-size="10">./backend:/app (开发模式 - 可选)</text>
  
  <text x="100" y="820" class="label-cn" fill="white" font-size="11">用途: 持久化任务结果与状态文件</text>
  <text x="100" y="835" class="label-en" fill="white" font-size="9">Purpose: Persist task results and state files across container restarts</text>

  <!-- Network -->
  <rect x="540" y="700" width="420" height="140" class="network-purple" rx="8" filter="url(#shadow)"/>
  <text x="750" y="730" text-anchor="middle" class="label-cn" fill="white" font-weight="bold" font-size="14">🌐 容器网络 (Network)</text>
  
  <text x="560" y="760" class="label-cn" fill="white" font-weight="bold">网络类型: Bridge</text>
  <text x="570" y="780" class="label-cn" fill="white" font-size="11">• 容器间通信: frontend ↔ backend</text>
  <text x="570" y="797" class="label-cn" fill="white" font-size="11">• DNS解析: 通过服务名访问 (http://backend:8080)</text>
  
  <text x="560" y="820" class="label-en" fill="white" font-size="10">Network Formula: Latency_internal ≈ 0.1ms (localhost)</text>

  <!-- CI/CD Pipeline -->
  <rect x="1000" y="700" width="370" height="140" class="compose-green" rx="8" filter="url(#shadow)"/>
  <text x="1185" y="730" text-anchor="middle" class="label-cn" fill="white" font-weight="bold" font-size="14">🔄 CI/CD 流水线</text>
  
  <text x="1020" y="755" class="label-cn" fill="white" font-size="11">① Git Push → ② Lint And Test</text>
  <text x="1020" y="772" class="label-cn" fill="white" font-size="11">③ Docker Build → ④ Push to Registry</text>
  <text x="1020" y="789" class="label-cn" fill="white" font-size="11">⑤ Deploy to Staging → ⑥ Prod Release</text>
  
  <text x="1020" y="813" class="formula" fill="white" font-size="10">Build Time = T_deps + T_layers + T_tests ≈ 3-5min</text>

  <!-- Connection Arrows -->
  <path d="M 270 660 L 270 700" class="arrow"/>
  <path d="M 710 660 L 710 700" class="arrow"/>
  
  <path d="M 460 380 L 520 380" class="arrow-network"/>
  <text x="470" y="370" class="label-cn" font-size="10" fill="#9b59b6">HTTP</text>
  
  <path d="M 900 500 L 960 500" class="arrow-network"/>
  <text x="910" y="490" class="label-cn" font-size="10" fill="#9b59b6">API调用</text>

  <!-- Health Check Flow -->
  <rect x="30" y="870" width="1340" height="110" class="code-bg" rx="8" filter="url(#shadow)"/>
  <text x="700" y="895" text-anchor="middle" class="label-cn" font-weight="bold" font-size="14">健康检查机制 (Health Check Mechanism)</text>
  
  <rect x="60" y="910" width="380" height="55" fill="#d5f4e6" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="250" y="932" text-anchor="middle" class="label-cn" font-weight="bold">Frontend健康检查</text>
  <text x="80" y="950" class="formula" font-size="10">curl -f http://localhost:8501/_stcore/health</text>
  <text x="80" y="963" class="label-cn" font-size="9">间隔: 30秒, 超时: 10秒, 重试: 3次</text>
  
  <rect x="480" y="910" width="380" height="55" fill="#d5f4e6" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="670" y="932" text-anchor="middle" class="label-cn" font-weight="bold">Backend健康检查</text>
  <text x="500" y="950" class="formula" font-size="10">curl -f http://localhost:8080/health</text>
  <text x="500" y="963" class="label-cn" font-size="9">返回: status, llm_model, api_key_configured</text>
  
  <rect x="900" y="910" width="430" height="55" fill="#fff3cd" stroke="#ffc107" stroke-width="2" rx="5"/>
  <text x="1115" y="932" text-anchor="middle" class="label-cn" font-weight="bold">自动重启策略</text>
  <text x="920" y="950" class="formula" font-size="10">restart: unless-stopped</text>
  <text x="920" y="963" class="label-cn" font-size="9">失败重启延迟: exponential backoff (min=1s, max=60s)</text>

  <!-- Deployment Environments -->
  <text x="50" y="1000" class="label-cn" font-weight="bold" font-size="12">部署环境:</text>
  
  <rect x="150" y="985" width="100" height="20" fill="#3498db" stroke="#2980b9" stroke-width="1" rx="3"/>
  <text x="200" y="1000" text-anchor="middle" class="label-cn" fill="white" font-size="10">Dev</text>
  
  <rect x="270" y="985" width="100" height="20" fill="#f39c12" stroke="#d68910" stroke-width="1" rx="3"/>
  <text x="320" y="1000" text-anchor="middle" class="label-cn" fill="white" font-size="10">Staging</text>
  
  <rect x="390" y="985" width="100" height="20" fill="#e74c3c" stroke="#c0392b" stroke-width="1" rx="3"/>
  <text x="440" y="1000" text-anchor="middle" class="label-cn" fill="white" font-size="10">Production</text>
  
  <text x="520" y="1000" class="label-cn" font-size="11">各环境独立配置 .env 文件</text>
  
  <text x="900" y="1000" class="formula" font-size="11">Scalability: Horizontal scaling via K8s or Docker Swarm (future)</text>
</svg>