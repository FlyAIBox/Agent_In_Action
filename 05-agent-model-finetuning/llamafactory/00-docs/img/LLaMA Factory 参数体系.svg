<svg viewBox="0 0 1200 800" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: 'SimSun', serif; font-size: 24px; font-weight: bold; fill: #2c3e50; }
      .layer-title { font-family: 'SimSun', serif; font-size: 18px; font-weight: bold; fill: #34495e; }
      .param-text { font-family: 'Times New Roman', serif; font-size: 14px; fill: #2c3e50; }
      .formula-text { font-family: 'Times New Roman', serif; font-size: 12px; fill: #e74c3c; font-style: italic; }
      .chinese-text { font-family: 'SimSun', serif; font-size: 12px; fill: #7f8c8d; }
      
      .core-layer { fill: #e8f6f3; stroke: #16a085; ; }
      .algorithm-layer { fill: #fef9e7; stroke: #f39c12; ; }
      .resource-layer { fill: #ebf3fd; stroke: #3498db; ; }
      .execution-layer { fill: #f4ecf7; stroke: #9b59b6; ; }
      .monitor-layer { fill: #fdeaea; stroke: #e74c3c; ; }
      
      .arrow { stroke: #34495e; ; fill: none; marker-end: url(#arrowhead); }
      .dependency-line { stroke: #95a5a6; stroke-width: 1; stroke-dasharray: 5,5; }
    </style>
    
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#34495e" />
    </marker>
  </defs>
  
  <!-- 标题 -->
  <text x="600" y="30" text-anchor="middle" class="title-text">LLaMA Factory 参数体系架构</text>
  
  <!-- 核心控制层 -->
  <rect x="50" y="60" width="280" height="120" class="core-layer" rx="8"/>
  <text x="190" y="85" text-anchor="middle" class="layer-title">核心控制层</text>
  <text x="70" y="105" class="param-text">stage, finetuning_type</text>
  <text x="70" y="125" class="param-text">model_name_or_path</text>
  <text x="70" y="145" class="param-text">template, dataset</text>
  <text x="70" y="165" class="chinese-text">决定训练策略与模型选择</text>
  
  <!-- 算法配置层 -->
  <rect x="370" y="60" width="280" height="120" class="algorithm-layer" rx="8"/>
  <text x="510" y="85" text-anchor="middle" class="layer-title">算法配置层</text>
  <text x="390" y="105" class="param-text">lora_rank, lora_alpha</text>
  <text x="390" y="125" class="param-text">learning_rate, optimizer</text>
  <text x="390" y="145" class="formula-text">ΔW = α × B × A / r</text>
  <text x="390" y="165" class="chinese-text">控制微调算法与优化策略</text>
  
  <!-- 资源管理层 -->
  <rect x="690" y="60" width="280" height="120" class="resource-layer" rx="8"/>
  <text x="830" y="85" text-anchor="middle" class="layer-title">资源管理层</text>
  <text x="710" y="105" class="param-text">cutoff_len, batch_size</text>
  <text x="710" y="125" class="param-text">gradient_accumulation</text>
  <text x="710" y="145" class="formula-text">Memory ∝ len² × batch</text>
  <text x="710" y="165" class="chinese-text">管理计算资源与内存分配</text>
  
  <!-- 执行引擎层 -->
  <rect x="210" y="220" width="280" height="120" class="execution-layer" rx="8"/>
  <text x="350" y="245" text-anchor="middle" class="layer-title">执行引擎层</text>
  <text x="230" y="265" class="param-text">bf16, flash_attn</text>
  <text x="230" y="285" class="param-text">enable_liger_kernel</text>
  <text x="230" y="305" class="param-text">deepspeed_config</text>
  <text x="230" y="325" class="chinese-text">执行训练与推理任务</text>
  
  <!-- 监控评估层 -->
  <rect x="530" y="220" width="280" height="120" class="monitor-layer" rx="8"/>
  <text x="670" y="245" text-anchor="middle" class="layer-title">监控评估层</text>
  <text x="550" y="265" class="param-text">logging_steps, save_steps</text>
  <text x="550" y="285" class="param-text">eval_steps, plot_loss</text>
  <text x="550" y="305" class="param-text">val_size, metric</text>
  <text x="550" y="325" class="chinese-text">实验跟踪与性能监控</text>
  
  <!-- 层级关系箭头 -->
  <path d="M 190 180 L 190 220" class="arrow"/>
  <path d="M 510 180 L 510 220" class="arrow"/>
  <path d="M 830 180 L 830 220" class="arrow"/>
  <path d="M 350 340 L 350 380" class="arrow"/>
  <path d="M 670 340 L 670 380" class="arrow"/>
  
  <!-- 参数依赖关系 -->
  <g transform="translate(50, 400)">
    <text x="0" y="0" class="layer-title">参数依赖关系</text>
    
    <!-- 一级依赖（强制约束） -->
    <rect x="0" y="20" width="300" height="100" fill="#fff5f5" stroke="#e74c3c" rx="5"/>
    <text x="10" y="40" class="param-text" font-weight="bold">一级依赖（强制约束）</text>
    <text x="10" y="60" class="param-text">model_name_or_path → template</text>
    <text x="10" y="80" class="param-text">finetuning_type → lora_*</text>
    <text x="10" y="100" class="param-text">stage → dataset</text>
    
    <!-- 二级依赖（性能影响） -->
    <rect x="320" y="20" width="350" height="100" fill="#f0f8ff" stroke="#3498db" rx="5"/>
    <text x="330" y="40" class="param-text" font-weight="bold">二级依赖（性能影响）</text>
    <text x="330" y="60" class="param-text">cutoff_len × batch_size → 显存消耗</text>
    <text x="330" y="80" class="param-text">learning_rate × optimizer → 训练稳定性</text>
    <text x="330" y="100" class="param-text">lora_rank × lora_alpha → LoRA表达能力</text>
    
    <!-- 三级依赖（优化效果） -->
    <rect x="690" y="20" width="300" height="100" fill="#f9f9f9" stroke="#95a5a6" rx="5"/>
    <text x="700" y="40" class="param-text" font-weight="bold">三级依赖（优化效果）</text>
    <text x="700" y="60" class="param-text">flash_attn + unsloth → 计算效率</text>
    <text x="700" y="80" class="param-text">liger_kernel → 内存优化</text>
    <text x="700" y="100" class="param-text">deepspeed → 分布式效率</text>
  </g>
  
  <!-- 显存消耗模型 -->
  <g transform="translate(100, 550)">
    <rect x="0" y="0" width="400" height="120" fill="#fff8e1" stroke="#ff9800"  rx="8"/>
    <text x="200" y="25" text-anchor="middle" class="layer-title">显存消耗模型</text>
    <text x="20" y="50" class="formula-text">Memory = Model_Params + Optimizer_States + Activations</text>
    <text x="20" y="70" class="formula-text">Activations ∝ cutoff_len² × batch_size × num_layers</text>
    <text x="20" y="90" class="param-text">关键优化：cutoff_len=2048, batch_size=1, bf16=True</text>
    <text x="20" y="110" class="chinese-text">24GB显存可支持7B模型，序列长度2048的训练</text>
  </g>
  
  <!-- LoRA 原理图 -->
  <g transform="translate(550, 550)">
    <rect x="0" y="0" width="400" height="120" fill="#f3e5f5" stroke="#9c27b0"  rx="8"/>
    <text x="200" y="25" text-anchor="middle" class="layer-title">LoRA 原理</text>
    <text x="20" y="50" class="formula-text">W' = W₀ + α × B × A / r</text>
    <text x="20" y="70" class="param-text">B ∈ ℝ^(d×r), A ∈ ℝ^(r×k), r ≪ min(d,k)</text>
    <text x="20" y="90" class="param-text">推荐配置：rank=16, alpha=32, target=all</text>
    <text x="20" y="110" class="chinese-text">参数量仅为原模型的0.1%-1%，显存友好</text>
  </g>
  
  <!-- 连接线 -->
  <path d="M 330 180 L 430 220" class="dependency-line"/>
  <path d="M 670 180 L 570 220" class="dependency-line"/>
  <path d="M 350 180 L 350 220" class="dependency-line"/>
  
</svg>